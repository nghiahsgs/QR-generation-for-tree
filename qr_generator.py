#!/usr/bin/env python3
"""
QR Code Generator with PDF Export
T·∫°o m√£ QR v√† xu·∫•t ra PDF chu·∫©n A4 ƒë·ªÉ in
"""

import qrcode
from PIL import Image
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
import io
import os
from datetime import datetime

class QRCodePDFGenerator:
    def __init__(self):
        # K√≠ch th∆∞·ªõc A4 trong points (1 inch = 72 points)
        self.page_width, self.page_height = A4

        # K√≠ch th∆∞·ªõc QR code: 10cm x 10cm
        # 1 cm = 28.35 points (x·∫•p x·ªâ)
        self.qr_size_cm = 10
        self.qr_size_points = self.qr_size_cm * 28.35

        # Margin cho trang
        self.margin = 30  # points

        # T√≠nh s·ªë QR code tr√™n m·ªôt h√†ng v√† m·ªôt c·ªôt
        self.qr_per_row = int((self.page_width - 2 * self.margin) / self.qr_size_points)
        self.qr_per_col = int((self.page_height - 2 * self.margin) / self.qr_size_points)

        print(f"üìê K√≠ch th∆∞·ªõc trang A4: {self.page_width:.0f} x {self.page_height:.0f} points")
        print(f"üì¶ K√≠ch th∆∞·ªõc QR: {self.qr_size_cm}cm x {self.qr_size_cm}cm ({self.qr_size_points:.0f} points)")
        print(f"üìä S·ªë QR m·ªói trang: {self.qr_per_row} x {self.qr_per_col} = {self.qr_per_row * self.qr_per_col} QR codes")

    def generate_qr(self, data, error_correction=qrcode.constants.ERROR_CORRECT_L):
        """T·∫°o m·ªôt m√£ QR t·ª´ d·ªØ li·ªáu"""
        qr = qrcode.QRCode(
            version=1,  # Version 1 = 21x21 modules
            error_correction=error_correction,
            box_size=10,
            border=2,
        )
        qr.add_data(data)
        qr.make(fit=True)

        # In ra th√¥ng tin matrix size
        print(f"  QR '{data}': Version {qr.version} = {qr.modules_count}x{qr.modules_count} modules")

        # T·∫°o ·∫£nh QR
        img = qr.make_image(fill_color="black", back_color="white")

        # Resize v·ªÅ k√≠ch th∆∞·ªõc chu·∫©n (pixels)
        # V·ªõi DPI 300 cho in ·∫•n ch·∫•t l∆∞·ª£ng cao
        dpi = 300
        pixel_size = int(self.qr_size_cm * dpi / 2.54)  # 2.54 cm = 1 inch
        img = img.resize((pixel_size, pixel_size), Image.Resampling.LANCZOS)

        return img

    def create_pdf(self, qr_data_list, output_filename="qr_codes.pdf"):
        """T·∫°o PDF ch·ª©a c√°c m√£ QR"""
        pdf = canvas.Canvas(output_filename, pagesize=A4)

        # Th√™m metadata
        pdf.setTitle("QR Codes for Printing")
        pdf.setAuthor("QR Generator App")

        current_qr = 0
        total_qrs = len(qr_data_list)

        while current_qr < total_qrs:
            # V·∫Ω QR codes cho trang hi·ªán t·∫°i
            for row in range(self.qr_per_col):
                for col in range(self.qr_per_row):
                    if current_qr >= total_qrs:
                        break

                    # T·∫°o QR code
                    qr_img = self.generate_qr(qr_data_list[current_qr])

                    # Convert PIL image to bytes for ReportLab
                    img_buffer = io.BytesIO()
                    qr_img.save(img_buffer, format='PNG')
                    img_buffer.seek(0)

                    # T√≠nh v·ªã tr√≠ x, y cho QR code
                    x = self.margin + col * self.qr_size_points
                    # T·ªça ƒë·ªô y trong PDF t√≠nh t·ª´ bottom l√™n
                    y = self.page_height - self.margin - (row + 1) * self.qr_size_points

                    # V·∫Ω QR code v√†o PDF
                    pdf.drawImage(ImageReader(img_buffer),
                                x, y,
                                width=self.qr_size_points,
                                height=self.qr_size_points,
                                preserveAspectRatio=True)

                    # Th√™m text b√™n d∆∞·ªõi QR (optional)
                    pdf.setFont("Helvetica", 8)
                    text = qr_data_list[current_qr]
                    if len(text) > 20:
                        text = text[:17] + "..."
                    pdf.drawString(x + 5, y - 10, text)

                    current_qr += 1

            # Th√™m s·ªë trang
            pdf.setFont("Helvetica", 10)
            page_num = pdf.getPageNumber()
            pdf.drawString(self.page_width / 2 - 20, 20, f"Trang {page_num}")

            # T·∫°o trang m·ªõi n·∫øu c√≤n QR codes
            if current_qr < total_qrs:
                pdf.showPage()

        # L∆∞u PDF
        pdf.save()
        print(f"‚úÖ ƒê√£ t·∫°o file PDF: {output_filename}")
        print(f"üìÑ T·ªïng s·ªë trang: {pdf.getPageNumber()}")

        return output_filename

def main():
    """H√†m ch√≠nh ƒë·ªÉ demo"""
    print("üöÄ QR Code Generator - PDF A4 Export")
    print("-" * 50)

    # Kh·ªüi t·∫°o generator
    generator = QRCodePDFGenerator()

    # D·ªØ li·ªáu m·∫´u cho QR codes
    # B·∫°n c√≥ th·ªÉ thay ƒë·ªïi ho·∫∑c th√™m d·ªØ li·ªáu t√πy √Ω
    sample_data = [
        "A1",
        "A2",
        "A3",
        "A4",
        "A5",
        "A6",
        "A7",
        "A8",
        "A9",
        "A10",
        # Th√™m nhi·ªÅu h∆°n n·∫øu mu·ªën test nhi·ªÅu trang
    ]

    print(f"\nüìù T·∫°o {len(sample_data)} m√£ QR...")

    # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
    if not os.path.exists("output"):
        os.makedirs("output")

    # T·∫°o t√™n file v·ªõi timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"output/qr_codes_{timestamp}.pdf"

    # T·∫°o PDF
    generator.create_pdf(sample_data, output_file)

    print(f"\n‚ú® Ho√†n th√†nh! File PDF ƒë√£ s·∫µn s√†ng ƒë·ªÉ in.")
    print(f"üìç V·ªã tr√≠ file: {os.path.abspath(output_file)}")
    print(f"\nüí° Tips: Khi in, ch·ªçn 'Actual Size' ho·∫∑c '100%' ƒë·ªÉ gi·ªØ ƒë√∫ng k√≠ch th∆∞·ªõc 10x10cm")

if __name__ == "__main__":
    main()